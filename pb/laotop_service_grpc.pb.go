// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: laotop_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreateLaptopClient is the client API for CreateLaptop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateLaptopClient interface {
	CreateLaptop(ctx context.Context, in *CreateLaptopRequest, opts ...grpc.CallOption) (*CreateLaptopResponse, error)
	SearchLaptop(ctx context.Context, in *SearchLaptopRequest, opts ...grpc.CallOption) (CreateLaptop_SearchLaptopClient, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (CreateLaptop_UploadImageClient, error)
	RateLaptop(ctx context.Context, opts ...grpc.CallOption) (CreateLaptop_RateLaptopClient, error)
}

type createLaptopClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateLaptopClient(cc grpc.ClientConnInterface) CreateLaptopClient {
	return &createLaptopClient{cc}
}

func (c *createLaptopClient) CreateLaptop(ctx context.Context, in *CreateLaptopRequest, opts ...grpc.CallOption) (*CreateLaptopResponse, error) {
	out := new(CreateLaptopResponse)
	err := c.cc.Invoke(ctx, "/george.pcbook.CreateLaptop/CreateLaptop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createLaptopClient) SearchLaptop(ctx context.Context, in *SearchLaptopRequest, opts ...grpc.CallOption) (CreateLaptop_SearchLaptopClient, error) {
	stream, err := c.cc.NewStream(ctx, &CreateLaptop_ServiceDesc.Streams[0], "/george.pcbook.CreateLaptop/SearchLaptop", opts...)
	if err != nil {
		return nil, err
	}
	x := &createLaptopSearchLaptopClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CreateLaptop_SearchLaptopClient interface {
	Recv() (*SearchLaptopResponse, error)
	grpc.ClientStream
}

type createLaptopSearchLaptopClient struct {
	grpc.ClientStream
}

func (x *createLaptopSearchLaptopClient) Recv() (*SearchLaptopResponse, error) {
	m := new(SearchLaptopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *createLaptopClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (CreateLaptop_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CreateLaptop_ServiceDesc.Streams[1], "/george.pcbook.CreateLaptop/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &createLaptopUploadImageClient{stream}
	return x, nil
}

type CreateLaptop_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type createLaptopUploadImageClient struct {
	grpc.ClientStream
}

func (x *createLaptopUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *createLaptopUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *createLaptopClient) RateLaptop(ctx context.Context, opts ...grpc.CallOption) (CreateLaptop_RateLaptopClient, error) {
	stream, err := c.cc.NewStream(ctx, &CreateLaptop_ServiceDesc.Streams[2], "/george.pcbook.CreateLaptop/RateLaptop", opts...)
	if err != nil {
		return nil, err
	}
	x := &createLaptopRateLaptopClient{stream}
	return x, nil
}

type CreateLaptop_RateLaptopClient interface {
	Send(*RateLaptopRequest) error
	Recv() (*RateLaptopResponse, error)
	grpc.ClientStream
}

type createLaptopRateLaptopClient struct {
	grpc.ClientStream
}

func (x *createLaptopRateLaptopClient) Send(m *RateLaptopRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *createLaptopRateLaptopClient) Recv() (*RateLaptopResponse, error) {
	m := new(RateLaptopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CreateLaptopServer is the server API for CreateLaptop service.
// All implementations must embed UnimplementedCreateLaptopServer
// for forward compatibility
type CreateLaptopServer interface {
	CreateLaptop(context.Context, *CreateLaptopRequest) (*CreateLaptopResponse, error)
	SearchLaptop(*SearchLaptopRequest, CreateLaptop_SearchLaptopServer) error
	UploadImage(CreateLaptop_UploadImageServer) error
	RateLaptop(CreateLaptop_RateLaptopServer) error
	mustEmbedUnimplementedCreateLaptopServer()
}

// UnimplementedCreateLaptopServer must be embedded to have forward compatible implementations.
type UnimplementedCreateLaptopServer struct {
}

func (UnimplementedCreateLaptopServer) CreateLaptop(context.Context, *CreateLaptopRequest) (*CreateLaptopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLaptop not implemented")
}
func (UnimplementedCreateLaptopServer) SearchLaptop(*SearchLaptopRequest, CreateLaptop_SearchLaptopServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchLaptop not implemented")
}
func (UnimplementedCreateLaptopServer) UploadImage(CreateLaptop_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedCreateLaptopServer) RateLaptop(CreateLaptop_RateLaptopServer) error {
	return status.Errorf(codes.Unimplemented, "method RateLaptop not implemented")
}
func (UnimplementedCreateLaptopServer) mustEmbedUnimplementedCreateLaptopServer() {}

// UnsafeCreateLaptopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateLaptopServer will
// result in compilation errors.
type UnsafeCreateLaptopServer interface {
	mustEmbedUnimplementedCreateLaptopServer()
}

func RegisterCreateLaptopServer(s grpc.ServiceRegistrar, srv CreateLaptopServer) {
	s.RegisterService(&CreateLaptop_ServiceDesc, srv)
}

func _CreateLaptop_CreateLaptop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLaptopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateLaptopServer).CreateLaptop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/george.pcbook.CreateLaptop/CreateLaptop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateLaptopServer).CreateLaptop(ctx, req.(*CreateLaptopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateLaptop_SearchLaptop_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchLaptopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CreateLaptopServer).SearchLaptop(m, &createLaptopSearchLaptopServer{stream})
}

type CreateLaptop_SearchLaptopServer interface {
	Send(*SearchLaptopResponse) error
	grpc.ServerStream
}

type createLaptopSearchLaptopServer struct {
	grpc.ServerStream
}

func (x *createLaptopSearchLaptopServer) Send(m *SearchLaptopResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CreateLaptop_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CreateLaptopServer).UploadImage(&createLaptopUploadImageServer{stream})
}

type CreateLaptop_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type createLaptopUploadImageServer struct {
	grpc.ServerStream
}

func (x *createLaptopUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *createLaptopUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CreateLaptop_RateLaptop_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CreateLaptopServer).RateLaptop(&createLaptopRateLaptopServer{stream})
}

type CreateLaptop_RateLaptopServer interface {
	Send(*RateLaptopResponse) error
	Recv() (*RateLaptopRequest, error)
	grpc.ServerStream
}

type createLaptopRateLaptopServer struct {
	grpc.ServerStream
}

func (x *createLaptopRateLaptopServer) Send(m *RateLaptopResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *createLaptopRateLaptopServer) Recv() (*RateLaptopRequest, error) {
	m := new(RateLaptopRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CreateLaptop_ServiceDesc is the grpc.ServiceDesc for CreateLaptop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateLaptop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "george.pcbook.CreateLaptop",
	HandlerType: (*CreateLaptopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLaptop",
			Handler:    _CreateLaptop_CreateLaptop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchLaptop",
			Handler:       _CreateLaptop_SearchLaptop_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _CreateLaptop_UploadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RateLaptop",
			Handler:       _CreateLaptop_RateLaptop_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "laotop_service.proto",
}
